// Code generated by go-bindata.
// sources:
// latest.sql
// migrations/10_add_trades_price.sql
// migrations/1_initial_schema.sql
// migrations/2_index_participants_by_toid.sql
// migrations/3_use_sequence_in_history_accounts.sql
// migrations/4_add_protocol_version.sql
// migrations/5_create_trades_table.sql
// migrations/6_create_assets_table.sql
// migrations/7_modify_trades_table.sql
// migrations/8_add_aggregators.sql
// migrations/8_create_asset_stats_table.sql
// migrations/9_add_header_xdr.sql
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _latestSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x5c\xed\x6e\xdb\xb8\xd2\xfe\x9f\xab\x20\x16\x05\xec\x00\x4e\xdf\xd8\x75\x9c\x34\xd9\x16\xf0\x3a\x6a\x6a\xac\x2b\x77\x6d\xf9\xed\x16\x45\x41\xd0\x12\x6d\xf3\x54\x12\x55\x8a\xee\x26\x7b\x70\xee\xfd\x40\x9f\xd6\x07\x29\x4a\xb6\xd2\x3d\xff\x1a\x6b\xf4\xcc\x33\xc3\x19\x0e\x39\xa4\x7a\x71\x71\x76\x71\x01\x3e\x52\x9f\x6f\x19\x5e\xfe\x31\x03\x16\xe2\x68\x8d\x7c\x0c\xac\xbd\xe3\x9d\x5d\x5c\x9c\x05\xcf\xef\xf7\x8e\x87\x2d\xb0\x61\xd4\x39\x08\xfc\xc0\xcc\x27\xd4\x05\xaf\x5f\x8e\x5e\x8e\x32\x52\xeb\x27\xe0\x6d\x61\xf0\x7a\x41\xe4\x6c\xa9\x19\xc0\xe7\x88\x63\x07\xbb\x1c\x72\xe2\x60\xba\xe7\xe0\x0d\xb8\xbc\x0b\x1f\xd9\xd4\xfc\x56\xfe\xd5\xb4\x49\x20\x8d\x5d\x93\x5a\xc4\xdd\x82\x37\xa0\xb3\x32\xde\xdd\x74\xee\x12\x38\xd7\x42\xcc\x82\x26\x75\x37\x94\x39\xc4\xdd\x42\x9f\x33\xe2\x6e\x7d\xf0\x06\x50\x37\xc6\xd8\x61\xf3\x1b\xdc\xec\x5d\x93\x13\xea\xc2\x35\xb5\x08\x0e\x9e\x6f\x90\xed\xe3\x9c\x1a\x87\xb8\xd0\xc1\xbe\x8f\xb6\xa1\xc0\x5f\x88\xb9\xc4\xdd\xde\xc5\xdc\x31\x62\xe6\x0e\x7a\x88\xef\xc0\x1b\xe0\xed\xd7\x36\x31\x7b\x81\xb1\x26\xe2\xc8\xa6\x81\x58\xe4\x4f\x1d\x39\xf8\x16\x6c\x08\xf3\x39\x44\xdb\x6d\x17\xb9\x4f\xd8\x0e\xad\xee\x81\xc3\xbf\xcf\xef\x80\xf1\xe4\xe1\x5b\xf0\x6e\xa5\x4f\x8c\xe9\x5c\xbf\x03\x4b\x73\x87\x1d\x74\x1b\x63\xdf\x81\xf9\x5f\x2e\x66\xb7\xe0\x22\x1c\x88\xc9\x42\x1b\x1b\x5a\x2a\xad\xc6\x07\x0b\xcd\x58\x2d\xf4\x65\xe6\xb7\x33\x00\x00\x98\x8d\xf5\x87\xd5\xf8\x41\x03\xfe\x77\x1b\x4c\x3f\x7c\x58\x19\xe3\xdf\x66\x1a\x58\x1a\x8b\xe9\xc4\x08\x25\xc6\x4b\xf0\x02\xbe\x00\x4b\x6d\xa6\x4d\x0c\xf0\xa2\x1f\xfc\x75\x77\x96\x37\xcf\x46\xcf\x6a\x9d\x0a\xbe\x35\xe3\x06\x22\xe3\x1c\xf4\x08\x3d\x46\x4c\x1c\x52\x70\xf7\x0e\x66\xc4\xfc\xf2\xb5\x07\xd2\x7f\x9e\x6a\x5f\x0d\x0d\xa9\x89\xe9\x4f\x47\x59\xd8\x3d\x03\x60\x32\x5e\x6a\xe0\xd3\x7b\x4d\x07\x2f\xfa\x5f\xfa\x5f\xff\xef\x45\xff\xcb\xe0\xeb\xdb\x17\x83\xf0\xdf\x83\x2f\x83\xaf\xc0\x88\x1e\x02\x6d\xb6\xd4\x02\xa7\x68\xfa\xfd\xb9\xd0\x33\xc4\x7d\x6e\xcf\xa8\x35\x3c\xb7\x67\x7e\x3d\xc6\x33\x61\x3e\x76\x05\x19\x30\x7e\x78\x58\x68\x0f\x63\x43\xab\xe7\x88\x54\xbc\x8c\x18\x32\x06\x60\x19\xf8\x2a\x98\xbf\x92\x19\xa0\x17\xfd\x6c\x7c\xfe\xa8\x81\x37\xd9\x8c\x38\x17\x65\x6d\xab\x1c\x8b\x80\x05\x8a\x49\x1a\xd7\x67\x98\x26\x46\xb7\x1c\x51\x47\xb3\x14\x81\x16\x98\xe6\x12\x32\x4f\xf7\x10\x65\x65\xb6\x49\xb0\xb6\xca\x56\x00\x5a\x64\x9b\x4d\x92\x4a\xb6\x41\xe5\xb2\xf0\x06\xed\x6d\x0e\x39\x5a\xdb\xd8\xf7\x90\x89\x83\x3a\xda\xb9\xcb\x3f\xfd\x8b\xf0\x1d\xa4\xc4\xca\x94\xc6\x9c\xad\xc8\xf7\x31\x87\x41\x05\xf7\x13\x13\xc3\x04\xab\x67\x5e\x94\x8b\x19\x8c\xd8\x22\x62\x81\x35\xd9\x12\x97\x03\x7d\x6e\x00\x7d\x35\x9b\x45\xe6\x20\x87\xee\x5d\x2e\x7e\xe6\xee\x1d\x88\x4c\x33\x10\xf0\x01\x71\x39\xde\x62\x56\x10\xd9\xd8\x68\xeb\x03\xdf\x41\xb6\x5d\x7e\x9f\x53\xc7\x06\xe6\x0e\x31\x64\x72\xcc\xc0\x0f\xc4\x9e\x88\xbb\xed\x8e\x86\xe7\xa9\x60\x79\xa8\xb7\x94\x79\xd0\x21\x5b\x86\x82\x55\xc4\xf1\x2e\x28\xe0\x1c\xdc\xc0\xf1\x63\xc9\x09\x9e\x67\x13\x6c\x41\xc4\x41\xb0\x32\xf2\x39\x72\x3c\x10\x8c\x53\xf8\x27\xf8\x9b\xba\xb8\x4c\x74\x47\x7c\x4e\xd9\x53\xea\x21\x48\x2c\xe8\xe3\xef\x09\xe1\xa5\xf6\xc7\x4a\xd3\x27\x35\x39\x27\xd2\x32\xd4\x38\xf4\xc6\x0b\x03\x7c\x9a\x1a\xef\x41\x3f\xfc\x61\xaa\x4f\x16\xda\x07\x4d\x37\xc0\x6f\x9f\xe3\x9f\xf4\x39\xf8\x30\xd5\xff\x7f\x3c\x5b\x69\xe9\xdf\xe3\x3f\x0f\x7f\x4f\xc6\x93\xf7\x1a\xe8\xab\x8c\x39\xda\xed\x45\xa0\x52\xf8\xdd\x6b\xef\xc6\xab\x99\x01\x5c\xfc\xc8\x7f\x20\xbb\xdb\x91\x58\xdc\xb9\xbd\x65\x78\x6b\xda\xc8\xf7\xcf\x8b\xc3\x65\x59\x0c\xfb\xbe\x38\xb4\x2a\x06\x2a\x48\x8a\x16\x2c\x0b\x61\x0e\x76\x89\x13\x23\xca\x40\xfe\xe4\x61\x45\x06\x64\xc5\x4d\x6a\x89\xc4\xfb\x03\xb1\x38\xf1\xfd\x3d\x66\x82\x17\xae\x46\x55\x19\x96\x37\xa4\xe5\xb0\xcd\x62\xfe\xb4\xa0\xad\x32\x04\xcc\x3f\xe9\xda\x3d\xf8\xed\xb3\xc2\xa2\xf1\xcc\xd0\x16\x0a\x83\x52\xac\xc2\xe3\x97\xc4\x92\x71\xc3\x9b\x0d\x36\x5b\x88\xba\x18\x27\x0e\xbb\x42\xce\x40\xd9\xec\x9e\xc8\x51\x0f\x47\xf3\xa0\x54\xf2\x17\xca\x2c\xcc\x7e\x91\x44\x73\x18\xc7\xe2\x47\x16\xe6\x88\xd8\x3e\xf8\x97\x4f\xdd\xb5\x3c\xd8\x6c\x6c\x6d\x31\x3b\xdd\x0f\x31\x4e\xec\x07\x1f\x7f\xdf\x63\xd7\x94\x71\x8b\x84\xe1\x0e\xf9\xbb\x5a\x59\xe8\x31\xfc\x83\xd0\xbd\x0f\x95\x2f\xc6\x6e\x61\xc8\xf5\x51\xb4\xdd\x0d\x07\x22\xe5\x91\xcc\x72\x97\x05\x0d\x87\x81\xa8\x27\x6f\xda\xd4\x17\x15\xa6\x60\xf3\x9e\xd6\xa6\xe2\x3b\x0c\x23\xae\x7c\x29\x92\xdd\x7b\x56\x6d\xd9\x34\x74\xe2\x3f\x1d\x8f\x32\x8e\x19\x4c\xfa\x0f\x45\x5b\xfa\xa5\xe5\x00\x47\x36\x34\x29\x71\x7d\x71\x0c\x6e\x30\x86\x1e\xa5\xb6\xf8\xe9\x1a\xf9\x18\x6e\xb0\x6c\xac\xc3\xc7\x1e\x66\x26\x76\x39\xda\x2a\x25\x19\xf6\x31\xfb\x21\x13\x09\x56\xa9\xfc\x11\x86\x8b\x28\xf2\xb7\x4c\xca\x63\x94\x53\x93\xda\x52\x0f\x14\x47\x33\x09\x2b\x8c\x2c\xcc\xc2\x85\x88\x3c\x61\x0e\x91\xe2\x21\xc6\x89\x49\x3c\xd4\x46\x5d\x16\xc3\xaa\xaa\x59\xfd\x79\x44\x3d\x33\x35\x35\xb9\xdd\x02\x55\xa9\xe3\x67\x15\xac\x46\x86\x9e\x58\xc0\x2a\x75\x95\x0b\x9a\x58\xbc\xa2\xc0\xa5\x2f\xb4\x18\x9b\xaa\x4d\x4b\x76\xde\x95\x6e\x6c\x82\x35\xbd\x19\x99\x12\xd6\xb6\x13\x4b\x5b\xf4\x93\x4f\xf7\x2c\xd8\x0d\x46\xd1\x2d\x29\x2a\x49\xfa\x77\x3a\xb7\xb7\x25\x89\x1a\x79\xc0\x19\xb2\xf0\xe9\xee\x8c\x60\x0a\x2b\x86\x53\x57\x02\xf1\x14\x76\x4c\x5d\xa2\x9b\x0d\x66\x52\xb5\xe1\xac\xac\x5a\xcf\x44\x42\xd1\xe2\xb7\x52\xa4\x62\x57\x1b\x6a\xc0\x4c\xa9\x2b\x95\xab\x54\x97\x4a\x55\x68\x0c\x29\x11\x1f\xfa\xd8\xb6\x31\x03\x6b\x4a\x6d\x8c\xdc\xa4\x86\x10\x13\x43\x37\x57\x59\xa3\xdf\xf2\xd5\x76\x32\xd7\x97\xc6\x62\x3c\xd5\x8d\xc2\xf8\xc2\x8c\xc1\x30\x6c\xc1\x83\xc9\x7b\x6d\xf2\x3b\xe8\x76\xb3\xae\x78\x0b\x2e\xcf\xcf\x55\x50\xa2\xd7\x13\xeb\x7f\x2d\x39\xa4\x06\x5e\xce\x39\x05\xf8\x82\xe7\x42\x82\x95\x39\x91\xa6\x7c\xab\x05\x51\x06\x5c\xb7\x24\xd6\x99\x8b\x4e\x29\x8a\x32\x7e\xed\x96\x45\x85\x96\x9f\x55\x18\x1b\x1a\x7b\x62\x69\x54\x68\x2b\x17\x47\xd9\x0b\x15\xe5\x31\xf3\x4a\xab\xb1\x9a\xc4\x67\x96\x52\xed\x7d\x4e\x3c\x89\x2b\x76\x4f\x75\x2b\x68\x75\x31\x14\xca\x1e\x54\xcb\x37\x02\x48\x96\x4d\xb2\x3d\xd4\x3f\xb2\x0b\xe2\x8f\x10\xbb\x3f\xb0\x4d\x3d\x2c\xea\x2c\xf2\xc7\x60\xa7\xb1\xb7\xb9\xe4\xa1\x83\x39\x92\x3c\x0a\x9c\x20\x7b\xec\x93\xad\x8b\xf8\x9e\x61\x51\x13\xec\xf5\xe8\xfc\xcb\xd7\xc3\x22\xe4\xdf\xff\x11\x2d\x43\xbe\x7c\x2d\x6e\x79\xb0\x43\x25\xfd\xaa\x03\x96\x4b\x5d\x5c\xb9\xa8\x39\x60\x95\x61\x62\xcb\x88\x83\xe1\x9a\xee\x5d\x2b\xec\x29\xdf\x30\xe4\x6e\xab\xba\xab\x51\xb7\x8d\x58\x49\xf2\xc4\x5c\x6a\x65\x7c\x94\x3d\x73\x7d\x56\x6c\xd8\x80\xe8\xf9\x64\x3e\x5b\x7d\xd0\x83\x21\x5d\x6a\x46\x45\x67\x32\xdb\x03\xca\xf6\x25\x9b\xad\xef\xdb\x33\x42\x82\xdf\xc8\xa8\xca\x7d\x41\x1d\x23\xa5\x85\xb3\x35\x33\xa5\x1a\x1a\x19\xaa\x98\xe5\xc5\xa6\xde\x23\x8e\xc0\x86\x32\xc5\x99\x0c\xb8\x1f\x1b\x63\x85\x79\x12\xc8\xaa\x73\x8e\x3a\xb0\x53\x7d\xa9\x2d\x0c\x30\xd5\x8d\x79\xe9\xac\x23\xac\xb7\x4b\xd0\xed\xf4\x21\x71\x09\x27\xc8\x86\x7e\x88\xf5\xd2\xff\x6e\x77\x7a\xa0\x33\xb8\xec\xdf\x5c\x5c\x0e\x2e\xfa\xaf\x40\xff\xea\x76\xd8\xbf\x1d\x0c\x5e\x0e\x5e\x0f\xaf\x07\xaf\x2f\x2e\x6f\x3a\xe7\x77\xf5\xd0\x07\x90\xb8\x16\x7e\xcc\x7b\x75\xfd\x04\x39\x25\x56\x95\xa6\x57\xfd\xe1\x60\x38\x68\xa2\xe9\x15\xdc\xfb\x38\x2d\x1a\x90\xb8\xb0\x78\x6a\x50\xa9\x6f\x70\x39\xea\x8f\x9a\xe8\x1b\x42\x64\x59\xb0\xd8\xdf\xa9\xd4\x31\xba\xec\x8f\x6e\x9a\xe8\xb8\x82\x51\x89\x4a\x16\xcb\xe1\xa9\x61\xa5\x8a\x9b\xeb\xe1\xd5\xb0\x89\x8a\x51\xa2\x22\x9e\xc1\x94\x2a\x86\x97\xd7\xd7\xd7\x8d\x3c\x75\x0d\x1d\x6a\x91\xcd\x53\x6d\x2b\x86\xc3\xab\xab\x41\xa3\xc1\xbf\x09\x07\x03\x6d\xb7\x0c\x6f\x11\xa7\xac\x72\xac\x87\x57\x83\xd7\x37\x57\xcd\xe0\xb3\x4e\x8a\x92\xbc\x86\x19\xa3\x9b\xcb\xe1\x75\x13\x3d\xaf\x43\x33\xa2\xde\x1f\x7c\xb4\x58\x25\xfa\xf5\x68\xd4\x2c\x17\xfb\x97\x21\x7c\x3c\x0a\xe1\x0e\xb2\x52\xc1\xcd\xe0\xea\xea\x55\xac\x40\x32\x43\x55\x9e\x09\x36\x99\xf9\x1a\x9d\x97\x06\x93\xb9\x02\x37\xbe\x57\x72\xb8\x12\xf6\xd2\xc7\xd5\x67\x89\x3d\xd0\xef\x45\x87\xed\x35\xcc\x2d\x1f\x13\x9e\x60\x6c\xe5\xd1\x54\x2b\xa6\xe6\x16\x27\x4d\x0c\x15\x1d\x4d\x9d\x50\xd0\xaa\x4e\x7a\x5a\x80\xad\xd1\x0f\x3f\x7e\x98\x9a\x35\x64\xdb\x18\xb6\xea\xe5\x57\x93\x61\x94\x34\x60\x5b\x70\xb9\xa0\x0f\xd9\x0e\xaa\xba\x93\x73\xfc\x50\x36\x6d\x21\xb4\x31\x98\xaa\x25\x66\x93\xe1\x94\x36\x0c\x9a\xbb\x24\x7b\x0b\x28\x5b\xdc\xbc\x6f\xf8\x29\x81\x3e\x34\xef\x9a\xae\xd2\x33\x88\xd1\xa5\xbf\xfb\xfb\x6c\x2b\xb0\xa8\x10\x7c\x5c\x4c\x3f\x8c\x17\x9f\xc1\xef\xda\x67\xd0\x25\x96\xea\xe2\x4f\xf1\xef\x96\x58\x17\x50\x45\xcc\x45\x8a\x95\xec\x0b\xfb\xcb\xc2\xec\x7c\xb8\xde\x01\x0f\x17\x43\x60\xf6\x16\x07\x6c\xc5\xba\xbc\x5a\x91\x71\x47\x11\x03\x2b\x7d\xfa\xc7\x4a\x03\xdd\x83\x78\x2f\x73\xc3\xa5\x97\xbb\x8f\xd2\xd0\x35\xed\x0c\x6b\x63\xc3\x1b\x0d\xaa\x64\xbf\xad\x98\xcb\xdb\xb5\x4c\xac\xa4\xca\xd2\x0a\x5a\xb5\x2d\x97\x6e\xc1\x95\x53\x5f\xbb\xd6\xcb\xd4\x54\xd9\x5f\x49\x4d\xe9\x81\x28\xa4\xd7\x4f\x61\xb4\x27\x86\x4c\xf5\x7b\xed\xcf\x7a\x9d\xdb\x50\x34\x8f\x02\xe6\x7a\x31\x19\x56\xcb\xa9\xfe\x00\xd6\x9c\x61\x9c\xcd\x2e\x39\x9b\x28\xc7\x4e\xe7\x13\xdf\x1d\xab\xc5\x48\x92\xd7\xeb\x74\x9d\x7d\x34\x9d\x03\x44\x96\x49\xae\xcd\x9d\xe7\x13\x09\xf7\x4a\x7d\x64\x11\xb9\x1d\xf2\x77\xa7\x30\x0b\xdb\xe9\xb5\x68\x15\x9b\xf0\x22\x36\xd1\xb2\xf8\x14\x3e\x11\x42\x3d\x46\x85\x0e\x7f\xaf\xdc\xcc\x17\xa6\x3c\xc4\x41\x6c\x84\xcf\x8f\x60\x1a\x57\x89\x88\x70\x01\x2e\x4b\x3b\xb9\xcb\x96\x63\x2c\x3a\xa0\xee\x25\x87\xd1\x32\xb2\x87\x56\xe3\x89\x34\x89\x55\x9b\xe0\xe1\x10\xaf\x27\x3c\x55\x57\x90\xa6\x1e\xf4\xda\xe2\x1d\x63\x65\xa9\x4b\x4a\xd5\x51\x96\x88\x0d\xe0\x8f\xed\x19\x10\x63\x49\x62\xfa\x48\x13\xf2\x27\xb2\x65\x23\xa8\x17\x44\xe5\x8e\x1e\x65\x43\x4c\xfe\x80\x71\xac\xf3\xab\x1d\x9d\x5e\x41\x0c\xa6\xea\xd3\x7d\x9d\x87\xcb\x52\x4e\xee\x53\xe6\x38\x8a\x19\x65\xfd\xda\x16\xad\x12\x66\xbd\xe9\x4d\x44\x90\x47\x43\xc2\x4f\x19\xd6\x03\xc6\xf1\x21\xa9\x0a\x3f\xce\xac\x70\x56\xdc\x6c\x4e\x28\x07\x39\x94\x02\x57\x0b\x17\x98\x25\x17\x6f\xc4\x5c\x92\x7b\x18\x36\xa5\xdf\xf6\xde\x69\x8c\xf2\x58\x2a\x5e\xa5\x0b\x25\x42\x7e\x1e\x22\x2c\xfc\x60\xb5\x15\x86\x45\x34\x15\xc7\xdc\x25\x98\x5e\xe9\x0e\x4c\xaf\x74\x21\x4a\x62\x44\x0b\xd9\x12\xe3\xa8\x18\x37\xac\x49\x01\x6a\x6b\xde\x6d\xe0\x58\xa5\xdf\xa2\xb3\xa5\x52\x47\x97\xba\x30\xfe\xfe\xe3\x54\x87\x2a\x15\xe4\x56\xc7\xc9\xf7\x2c\xf9\xf5\x68\x24\xd8\x80\xfb\xe9\x71\x50\x85\xad\x66\x2c\xc8\xb2\x3c\x60\xbc\xf6\x09\xf0\x82\xbd\xfd\xd1\xf1\x50\x89\xaa\x5c\x6c\x05\x42\x0a\xa2\x71\xe5\x0a\x20\xd3\x20\x6a\x89\xad\x08\x5a\x59\x34\xeb\x46\x72\x06\xbc\xed\x60\xc8\x41\x1f\x53\xe5\xe5\x70\x85\xcb\xfe\xed\x3b\xba\xf4\x39\x81\x92\x7e\xe1\x85\xfa\xc6\x64\xbe\xee\x78\x36\xff\x67\xbf\x20\x51\x59\x92\x91\xad\x6f\x84\xe8\x5b\x95\x67\xb3\x46\xf8\x61\x8c\xca\x2c\xd1\x4b\xf5\xed\x4b\xb6\xae\xcf\x66\x53\x7a\x05\x4d\x65\x87\xb4\xc7\x90\x87\x3e\x9c\xc3\x3c\x47\x6a\x17\xd1\x85\xdb\x8e\xa6\x09\x9e\x07\xcd\x2f\x5c\x5b\xca\xf0\x2a\x15\x75\x6c\x50\xac\xa6\x2b\x95\xb5\x57\xbe\xca\xc0\xb5\xb8\xab\x8b\x58\x76\x8b\xf3\x1c\x61\x53\xc6\x3f\x7a\x83\x15\x2e\xe2\xd2\x42\x9e\xf4\x75\xe0\x9a\xd2\x6f\x47\x7b\xb9\x02\x53\xb9\x44\xe8\x76\x93\xef\x33\x2e\xde\xbe\x05\x1d\x9f\xda\x56\xe6\x0c\xa3\x73\x7b\xcb\xf1\x23\x3f\x3f\xef\x01\xb9\xa0\x49\xad\x7a\x82\x51\x07\x54\x2e\xba\xa6\xfb\xed\x8e\xd7\x52\x9f\x13\xad\x26\x90\x13\x2d\x50\x38\x07\x9f\xde\x6b\x0b\x2d\x0a\x32\xf0\x06\xbc\x7a\x25\xe9\x19\x97\x8f\xff\x88\x05\x37\x99\xe6\xfc\xbb\xdf\x7f\xce\x21\x60\xac\x16\xbc\x9b\x2f\xb4\xe9\x83\x9e\x36\xde\xc1\x42\x7b\xa7\x2d\x34\x7d\xa2\x2d\x0b\xbd\xe8\xf0\xe9\x5c\x07\xab\x8f\xf7\x41\xc8\x2c\xb4\xe8\xbf\x18\x09\x7e\xba\xd7\x66\x9a\xa1\x81\xc9\x78\x39\x19\xdf\x6b\xd5\x1f\xd2\x88\x3f\x98\x48\x1b\x47\xed\x39\x23\xaf\x47\x71\x34\x21\x63\x92\xf7\x4f\x41\x42\xec\xac\x78\xa1\xaf\x38\xc7\x91\x7a\x22\xde\xca\xfe\xe3\x7e\xc8\xf2\x10\x79\x21\xe9\x12\x54\x07\x4c\x33\x0f\x94\x3f\x06\xfa\x07\xdd\x20\x21\x93\xf7\x45\x59\xa8\xe5\xa0\x28\xb6\x38\xfe\x17\x1c\x22\x0f\x8d\x52\x0f\xa9\x6e\x74\xc8\xfe\x37\x36\x60\x52\xc7\xb3\x31\xc7\x81\xdc\x7f\x03\x00\x00\xff\xff\xed\x34\x1b\x73\xb9\x4d\x00\x00")

func latestSqlBytes() ([]byte, error) {
	return bindataRead(
		_latestSql,
		"latest.sql",
	)
}

func latestSql() (*asset, error) {
	bytes, err := latestSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "latest.sql", size: 19897, mode: os.FileMode(420), modTime: time.Unix(1525137751, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations10_add_trades_priceSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x53\x51\x8b\xda\x4c\x14\x7d\x9f\x5f\x71\x1e\xf2\xa0\x7c\xfa\x15\x7d\xb5\x5b\x18\x93\xdb\x34\x10\xa3\x9d\x99\xd0\x16\x11\x99\x35\x63\x76\xc0\x4c\x64\x92\xc5\xdd\x7f\x5f\xb2\xba\xae\x2d\xec\x62\x5b\x68\xdf\x4e\x6e\xce\x5c\xce\xb9\x87\x33\x1c\xe2\xbf\xca\x96\x5e\xb7\x06\xf9\x9e\xb1\xe1\x10\xbc\x28\xe0\x75\x6b\x6b\xa7\x77\xd8\x7b\xbb\x31\x68\x6b\xb4\x5e\x17\xa6\x41\xab\x6f\x77\x86\xf1\x54\x91\x80\xe2\xd3\x94\x70\x67\x9b\xb6\xf6\x8f\xeb\x13\x81\x47\xd1\xf1\xd1\xda\x61\x9a\xc4\x49\xa6\x26\xd7\xd1\x8b\x33\xbd\x13\xa1\xcb\xd2\x9b\xb2\x53\xb5\xbd\x77\x9b\x4e\x0c\xb6\xb5\xc7\xd6\xba\xc2\xba\x12\x95\x75\xb6\x3a\xcb\x3b\xdc\x19\x77\x82\xb6\x81\x37\x7b\x6f\x1a\xe3\x5a\x53\x40\x37\xd0\x0e\xda\x7b\xfd\x88\x7a\x8b\xf6\x50\xc3\xec\x4c\x65\x5c\xdb\x60\xe9\x06\xc5\x8a\x85\x82\xb8\x22\xcc\x05\x04\x2d\x52\x1e\x12\x3e\xe6\x59\xa8\x92\x79\x86\xfd\xfd\xed\xce\x6e\xfe\xaf\xac\x5b\x1f\x25\xea\xb2\x44\x0f\x59\x3e\x23\x91\x84\xcb\xd5\xe0\x05\xf6\x19\x20\x48\xe5\x22\x93\x2f\x43\xa4\x3c\x8b\x73\x1e\x13\xe4\xe7\x14\xc9\x6c\x96\x1f\x4f\x20\x95\x48\x42\x05\x2e\x11\x04\x90\x94\x52\xa8\xd0\x63\x40\xc8\x25\xe1\xcb\x27\xca\x10\x8c\x96\xa3\xd5\xbb\x60\xb4\x1c\xaf\xde\x07\xe3\x27\x3c\x5e\x8e\x57\x50\xc7\x9f\xa0\x54\x12\x82\x31\x28\x8b\xfa\x08\x82\x09\x7b\xb6\xc1\xe3\x58\x50\xdc\xa1\x93\xf8\x59\x92\xad\x17\x22\x09\x09\x3d\x26\x3b\x67\xb8\xc1\x22\x9f\xa6\x49\xf8\xa3\xaf\x01\x9b\x72\x49\xea\xdb\x82\x70\x73\xe1\x90\xc9\x9f\x47\xac\x7f\x5d\x40\xfa\xe1\xef\x05\xa4\x1f\xfe\x61\x40\x1f\xfe\x30\x20\xfe\xf5\xd5\x80\x2e\x7d\xfd\x72\x40\xe7\x5a\x47\xf5\xc1\xbd\x55\xc1\x48\xcc\x17\xcf\x95\x7d\xb3\xab\x17\xc4\x62\xc2\xd8\xd3\xe7\xef\x94\x05\xfd\xee\x92\x21\x8f\x68\xf2\xca\x92\x2b\x02\xbd\x58\xf2\x3d\x00\x00\xff\xff\x19\x48\x96\x1e\xc4\x04\x00\x00")

func migrations10_add_trades_priceSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations10_add_trades_priceSql,
		"migrations/10_add_trades_price.sql",
	)
}

func migrations10_add_trades_priceSql() (*asset, error) {
	bytes, err := migrations10_add_trades_priceSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/10_add_trades_price.sql", size: 1220, mode: os.FileMode(420), modTime: time.Unix(1522972112, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations1_initial_schemaSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5a\x6d\x6f\xdb\xc8\x11\xfe\xee\x5f\x31\xb8\x2f\xb2\x51\xab\xbd\xe0\x8a\xc3\x55\x86\x0f\x50\x6c\xe6\x22\x54\xa6\x12\x89\x6a\x12\x1c\x0e\x8b\x15\x39\xa2\xb6\x26\x77\x99\xdd\xa5\x23\x5f\xd1\xff\x5e\xf0\x55\x7c\x27\xe5\x48\xee\x47\x71\x67\x67\xe6\x99\x99\x7d\x66\xb8\xd4\x78\x0c\x7f\xf1\x99\x2b\xa9\x46\x58\x07\x17\xe3\xf1\xc5\x78\x0c\x1f\x84\xd2\xae\xc4\xd5\xc7\x39\x38\x54\xd3\x0d\x55\x08\x4e\xe8\xc7\xcb\x17\x2b\xc3\x02\xa5\xa9\x46\x1f\xb9\x26\x9a\xf9\x28\x42\x0d\xb7\xf0\xe3\x4d\xbc\xe4\x09\xfb\xb1\xfe\xd4\xf6\x58\x24\x8d\xdc\x16\x0e\xe3\x2e\xdc\xc2\x68\x6d\xbd\xfb\x65\x74\x93\xa9\xe3\x0e\x95\x0e\xb1\x05\xdf\x0a\xe9\x33\xee\x12\xa5\x25\xe3\xae\x82\x5b\x10\x3c\xd5\xb1\x43\xfb\x91\x6c\x43\x6e\x6b\x26\x38\xd9\x08\x87\x61\xb4\xbe\xa5\x9e\xc2\x92\x19\x9f\x71\xe2\xa3\x52\xd4\x8d\x05\xbe\x51\xc9\x19\x77\x6f\x2e\x52\x78\x26\xf5\x71\x02\x81\x17\xb8\xea\xab\x77\x03\xd6\x73\x80\x13\x30\x3e\x5b\x86\xb9\x9a\x2d\xcc\x1b\x58\xd9\x3b\xf4\xe9\x04\xc6\x37\xb0\xf8\xc6\x51\x4e\x60\x1c\x23\xbf\x5b\x1a\x53\xcb\x38\x48\xc2\xec\x1d\x98\x0b\x0b\x8c\xcf\xb3\x95\xb5\xca\x14\xc2\xa7\x99\xf5\x1e\x56\x77\xef\x8d\x87\x29\x04\x2e\xb1\xa9\xa6\x9e\x88\xac\x97\xcc\x1f\xb4\x54\x1c\xb9\x5b\x3c\x3c\x18\xa6\xd5\xe1\x46\x22\x00\x0b\xb3\xae\x04\x66\x2b\x18\x7d\x98\xff\x2d\x70\xa3\xe4\x05\x52\xd8\xe8\x84\x92\x7a\xe0\x51\xee\x86\xd4\xc5\x51\xd5\x8f\x9d\xd2\x42\xe2\xe9\xa2\x90\xe8\x2b\x07\x21\xdc\x78\xcc\x6e\x0f\x40\xd9\x85\x97\xe1\x4f\xcd\x46\xf0\xa3\x92\x05\xfd\x1c\x20\x6c\x85\x84\xe8\x79\x54\x71\x0a\xb5\x02\xb1\x85\xcb\x47\x7c\xbe\x86\x27\xea\x85\x78\x05\x01\x65\x52\xc5\x21\x89\xcb\x10\xa9\xb4\x77\x24\xa0\x7a\x07\xb7\xa9\xd7\xd7\xe5\x14\x46\x62\x0e\x6e\x69\xe8\x69\xa2\xe9\xc6\x43\x15\x50\x1b\xa3\x72\x1e\x55\x56\xbf\x31\xbd\x23\x82\x39\x85\x0a\x2d\xc7\x9d\x45\x9e\x3d\x13\x6a\xdb\x22\xe4\x5a\x65\xf0\xad\xe9\xdb\xb9\x71\x00\x9f\xc6\x2e\x8f\xc0\x0d\x58\xb9\xd9\x49\x31\x1f\xf1\xbe\x9a\x56\xb8\xbc\x00\x00\x60\x0e\x6c\x98\xcb\xb8\x8e\x33\x65\xae\xe7\xf3\xeb\xf8\x39\x75\x1c\x89\x4a\x81\xbd\xa3\x92\xda\x1a\x25\x3c\x51\xf9\xcc\xb8\x7b\xf9\xf3\xdf\xaf\x2e\xae\x6a\xb5\x92\x6a\xc7\xed\x16\xed\x53\xbb\x9c\x2a\x4d\x3d\xae\x00\x21\x6d\x08\x32\x39\x11\xa0\xa4\x31\x2f\xb4\x49\xfe\x20\xa4\x83\xf2\x07\x60\x5c\xa3\x8b\xb2\xb2\x1a\xd7\x4b\xf3\x92\x83\x9a\x32\x4f\xc1\xbf\x95\xe0\x9b\xf6\xa0\x78\xe8\xb8\x28\x4f\x1c\x94\x54\x69\x1a\x14\x85\x5f\x43\xe4\x76\x9b\xa3\x89\x30\xd9\x51\xb5\x6b\xce\x68\x45\x3e\x90\xf8\xc4\x44\xa8\x48\xef\xc6\x34\x46\x92\x72\x45\x13\xf6\x8d\xb3\x92\xfb\x71\x6f\xbc\x9b\xae\xe7\x16\xfc\x58\xb1\x70\xc8\xca\x30\x79\xdb\x13\x0a\x1d\x42\x35\x44\x1d\x44\x69\xea\x07\x10\x1d\xa4\xa8\x97\x44\x4f\xe0\x4f\xc1\xb1\xba\x47\x22\xd5\xbd\x9b\x12\xd9\x30\x70\x06\xcb\xe6\x75\x94\xfe\xf4\x03\x21\x35\x4a\xf2\x84\x52\x31\xc1\x6b\x58\xde\x54\x2b\x4a\x68\xea\x11\x5b\x30\xae\x9a\x0b\x72\x8b\x48\x02\x21\xbc\xe6\xd5\xa8\xe9\x92\x2d\xb6\xe5\x3a\x5e\x0e\x50\xda\xc8\x35\x75\x13\xc9\x99\x69\x19\xbf\x19\xcb\x82\x80\x44\x85\xf2\xa9\x4d\x87\x4f\xf7\x44\xef\x89\x42\x4d\x14\xfb\xb3\x2e\xd5\x5e\xeb\x87\xbc\x06\x54\x6a\x66\xb3\x80\x9e\x9c\xc2\x9a\x6d\x1c\x08\xad\x19\xd3\x70\x3e\xe8\x67\x98\x63\xf1\x13\xe6\x10\x85\x5f\xb3\x30\xac\x8c\x8f\x6b\xc3\xbc\xeb\x88\x44\x11\x7c\x26\x3d\xcc\x46\x8c\x60\x65\x4d\x97\x56\xd2\x69\xdf\xc4\x0f\x66\xe6\xdd\xd2\x88\x7b\xe3\xdb\x2f\xe9\x23\x73\x01\x0f\x33\xf3\x5f\xd3\xf9\xda\xc8\x7f\x4f\x3f\x1f\x7e\xdf\x4d\xef\xde\x1b\xf0\xe6\x24\x40\x61\xf1\xc9\x34\xee\xe1\xed\x97\x1e\xc4\xd3\xb9\x65\x2c\x8f\x04\x9c\xeb\xee\x11\xff\x2b\x73\x7a\xb1\x9c\xab\x50\xfb\xba\x6d\x91\x3f\x5b\x3b\x72\x10\x78\xcc\x4e\x70\xc5\x0d\xeb\x3b\xfb\x55\xf2\x48\x89\x50\xda\x98\x95\x7a\x4b\x73\xc8\x88\x6c\x34\x9a\x4c\x6a\x12\x03\x0e\x45\x11\xde\xf9\x68\xa1\xcd\x4a\x1c\xfb\x16\x5a\x68\xda\xdb\x9c\x80\xef\x21\x85\x36\xcf\x4e\x4b\x0b\x3d\x56\x5e\x8b\x18\x8e\x04\xfb\x9d\xd4\xd0\x63\xad\x4e\x0e\x6d\x1b\x3a\xe8\xa1\xb0\xe5\x7c\x25\x9b\x51\x44\xd1\xbf\xc1\xf3\x5a\x3a\xa6\xf5\x4c\x81\x43\x19\xa4\x9b\x0c\x1a\x65\x0f\xa6\xdb\x07\x1a\xda\xda\x9a\xdb\x86\xc1\xff\xcb\x38\xa7\xf7\x04\xf9\x13\x7a\x22\x40\xd0\xb8\xaf\x51\xf5\x3e\x9a\x9d\x42\x4f\xb7\x2c\xfa\x18\xbd\x63\x36\x2e\x45\x51\x68\x5b\x56\xcc\xe5\x54\x87\x12\x9b\x5e\xb9\xfe\xf1\xf3\xd5\xef\x7f\x1c\x58\xf8\x3f\xff\x6d\xe2\xe1\xdf\xff\xa8\x0e\x71\xe8\x0b\x12\x77\x83\x3a\x67\xe7\xba\xb8\xe0\xd8\xc9\xea\x07\x5d\x75\x35\x29\x32\xe6\x23\xd9\x88\x90\x3b\x2a\xca\xdc\x2f\x92\x72\x17\x63\x32\x2c\x1e\x26\xe6\x64\x47\x27\xb5\x3d\xe8\xbc\x27\xc7\x65\x61\xce\xfb\xba\x3b\x24\xf2\x77\x8b\xf9\xfa\xc1\x8c\x52\x1a\xbd\x71\x67\x28\x39\xee\xf5\x13\xf5\x2e\x47\x83\x06\x8a\xd1\x64\x22\xd1\xb5\x3d\xaa\x54\x8d\xd1\x4f\x86\xa2\xb5\x59\x1d\x85\xa3\x87\xfd\xba\x90\xf4\x84\x22\x78\xc4\xe7\xc3\xbd\x8b\xb9\xb2\x96\xd3\x99\xd9\x81\xb6\x4e\x78\x47\x26\x30\x2e\xa5\xe9\xfd\x7d\xc1\xda\x10\x1f\xe1\xc3\x72\xf6\x30\x5d\x7e\x81\x7f\x1a\x5f\xe0\x92\x39\xc7\xf7\xe0\x33\x22\x6d\xb3\xd9\x85\xb5\xd3\xcf\x5e\xb4\x9b\x7c\x40\xc9\x20\xcd\xcc\x7b\xe3\xf3\x0b\x1a\x55\xbc\xaf\xa0\x0f\x16\x66\x73\xdb\x5a\xaf\x66\xe6\x6f\xb0\xd1\x12\x11\x2e\x53\xe1\xeb\x5a\x5f\x68\xf2\x34\x6a\x6f\x27\x73\x33\xee\x95\x83\x7c\xac\x76\xd8\x26\xd7\x92\x86\x7a\x32\xe7\x12\x75\xc3\xdc\xab\xf4\xf2\xeb\x7a\xdb\x6e\xac\x71\x82\x64\xf3\x9c\xac\x7f\xaf\xdb\x6b\x73\xf6\x71\x9d\x79\x5f\xd1\x5d\xc4\x90\xdd\xcb\x95\xdc\x6f\x7a\xcd\xbe\xce\xae\xd8\xda\x3c\x3f\xd0\xea\x29\x7d\x66\xce\x60\x6f\x0f\x53\xfd\x75\xe3\x45\x41\x0f\x02\x11\x90\xe0\x2c\x20\x52\xc5\x45\x1c\x2d\xfd\xef\x45\xb0\xea\x68\xf2\x2b\xbf\xcd\xf3\xc9\x01\x95\x75\x17\x31\x65\x97\x99\x25\x10\xcd\xee\x15\x4f\xef\x59\x7c\xac\x19\x18\x76\x6c\x1b\xbc\x65\xdc\xc1\x3d\xa9\x5e\xbc\x13\xc1\x49\x7a\xbb\x7e\x52\xd7\x7b\xad\x15\x71\xe4\x5f\x01\xca\xec\x9d\x08\x1e\x01\xe4\xc4\xe1\xef\x32\xd4\xef\x7e\x6f\x0a\x52\x0a\x88\xf4\x45\x73\xf1\x69\xe8\xbd\xd3\x44\x2f\x01\x45\x42\x3d\x5e\xa7\x87\x23\x52\x99\xdf\x82\x9f\xc3\xf5\x26\x3b\xbd\x87\x34\x97\x1c\x0e\xe2\xac\x35\x53\xb2\xf3\x12\x8a\x69\x57\x57\xb9\xe6\x3f\x73\x0a\x6a\x5f\x15\x7a\xb1\x54\x36\x0c\x47\x56\xf8\xc8\xf3\x3a\x99\x29\x7e\x55\xea\x83\x55\x90\x1d\x8e\xa8\xe9\xfb\xd5\xeb\x40\x6b\xfc\x72\xd6\x87\xb1\x69\xd3\x70\xb0\xd9\xa4\xf8\x3a\x00\xf3\x8b\x9e\x3e\x50\xad\x93\x7f\x59\xf5\xe1\x8e\xfc\xec\xdc\x50\x35\xd5\x38\x55\x1d\xcb\x10\x65\xa5\xe5\x7b\xe4\x73\x50\x44\x97\xbd\x21\x80\xca\x3b\x8e\x03\x77\xa6\x9e\x59\xb7\x32\x08\x48\x53\xe7\x8c\x87\x66\xbd\x3f\xd3\x34\x9e\x2a\x6e\x19\x08\x5f\x38\x8f\xd7\x13\xd2\x9e\x8f\xe2\xf8\x79\xf6\xe3\x52\x37\xf6\xe2\x49\x58\x4b\xea\x60\x3e\x1b\x65\xef\x92\x64\x23\xc4\xe3\x69\x0a\xaa\xc3\x40\xef\x08\x76\x79\x99\x7d\x17\x1b\xff\xfa\x2b\x8c\x94\xf0\x1c\x42\x95\x42\x1d\x97\xe2\x68\x32\xd1\xb8\xd7\x57\x57\xd7\xd0\x2e\x68\x0b\x67\x98\x20\x53\x2a\x44\xd9\x2e\xba\x11\xa1\xbb\xd3\x83\xcc\x97\x44\xbb\x1d\x28\x89\x56\x5c\xb8\x82\x4f\xef\x8d\xa5\x91\x9c\x27\xb8\x85\x9f\x7e\x2a\x64\xaf\xed\xef\x7e\x60\x0b\x3f\xf0\x50\x63\x9c\x89\xe2\x3f\x05\xef\xc5\x37\x7e\xe1\x48\x11\x40\xfc\x27\xa8\xe6\x72\xb1\xa9\xb2\xa9\x83\x37\x3d\x82\xe5\x03\xd5\xb5\xa9\xc0\x11\x83\xc4\x86\x6b\xce\x5a\x5b\x97\x4c\x56\x55\x5d\x32\xf9\x1b\x4b\x2e\xf4\xbf\x00\x00\x00\xff\xff\x67\x91\x1c\x73\x60\x29\x00\x00")

func migrations1_initial_schemaSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations1_initial_schemaSql,
		"migrations/1_initial_schema.sql",
	)
}

func migrations1_initial_schemaSql() (*asset, error) {
	bytes, err := migrations1_initial_schemaSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/1_initial_schema.sql", size: 10592, mode: os.FileMode(420), modTime: time.Unix(1523493381, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations2_index_participants_by_toidSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8f\xb1\xca\xc2\x50\x0c\x46\xf7\x3c\x45\xc6\xff\x47\xfa\x04\x9d\xc4\x16\xe9\xd2\x4a\xb5\xe0\x76\x49\xdb\x8b\xcd\xe0\xcd\x25\x37\x20\x7d\x7b\x41\x07\x5b\xbb\xb8\x86\x8f\x73\x72\xb2\x0c\x77\x77\xbe\x29\x99\xc7\x2e\x02\x1c\xda\x72\x7f\x29\xb1\xaa\x8b\xf2\x8a\x93\x44\xd7\xcf\x6e\x12\x1e\xb1\xa9\x71\xe2\x64\xa2\xb3\x93\xe8\x95\x8c\x25\xb8\x48\x6a\x3c\x70\xa4\x60\x09\xbb\x73\x55\x1f\xb1\x37\xf5\x1e\xff\xb6\x5b\x1e\xff\xf3\x2f\xbc\xbd\xf1\xb6\xc6\x9b\x52\x48\x34\xfc\x28\x58\xae\x5f\x0a\x58\x26\x15\xf2\x08\x00\x45\xdb\x9c\xb6\x49\xf9\xea\xfe\xf9\x25\x87\x67\x00\x00\x00\xff\xff\x33\xec\x54\x7a\x15\x01\x00\x00")

func migrations2_index_participants_by_toidSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations2_index_participants_by_toidSql,
		"migrations/2_index_participants_by_toid.sql",
	)
}

func migrations2_index_participants_by_toidSql() (*asset, error) {
	bytes, err := migrations2_index_participants_by_toidSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/2_index_participants_by_toid.sql", size: 277, mode: os.FileMode(420), modTime: time.Unix(1522905898, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations3_use_sequence_in_history_accountsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x91\x4d\x6b\xb3\x40\x14\x85\xf7\xf3\x2b\xce\x2e\xca\xfb\x66\x91\x6d\x5c\x4d\xc6\x1b\x22\x8c\x63\x3b\x5e\xdb\x64\x25\xa2\x43\x3a\x90\x6a\xeb\xd8\xaf\x7f\x5f\x48\xd3\x0f\x08\x6d\xa1\xcb\x73\x78\xe0\x39\xdc\x3b\x9f\xe3\xdf\xad\xdf\x8f\xcd\xe4\x50\xdd\x09\x65\x49\x32\xa1\xa4\xcb\x8a\x8c\x22\xdc\xf8\x30\x0d\xe3\x4b\xdd\xb4\xed\xf0\xd0\x4f\xa1\xf6\x5d\x1d\xdc\xbd\x00\x80\x92\xa5\x65\x5c\x67\xbc\xc1\xe2\x58\x64\x46\x59\xca\xc9\x30\x56\xbb\x53\x65\x0a\xe4\x99\xb9\x92\xba\xa2\x8f\x2c\xb7\x9f\x59\x49\xb5\x21\x2c\x12\x51\x92\x26\xc5\x08\x6e\x7a\x6c\x0e\xd1\xec\x1b\xef\xec\x3f\xa2\x13\x99\xcb\x6d\xe4\xbb\x18\x6b\x5b\xe4\x67\x33\xe3\x38\x11\x52\x33\x59\xb0\x5c\x69\x42\x61\xf4\xee\x0c\xc2\x1b\xa1\x0a\x5d\xe5\x06\xbe\x43\x49\x8c\x94\xd6\xb2\xd2\x8c\xde\x3d\xff\xbc\x64\xb9\x1c\xdd\xbe\x3d\x34\x21\xc4\x89\x10\x5f\xcf\x98\x0e\x4f\xfd\x1f\xec\xa9\x2d\x2e\xde\xf5\x89\x38\xa6\xdf\xde\x90\x88\xd7\x00\x00\x00\xff\xff\x55\xe2\xdd\x2c\xbf\x01\x00\x00")

func migrations3_use_sequence_in_history_accountsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations3_use_sequence_in_history_accountsSql,
		"migrations/3_use_sequence_in_history_accounts.sql",
	)
}

func migrations3_use_sequence_in_history_accountsSql() (*asset, error) {
	bytes, err := migrations3_use_sequence_in_history_accountsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/3_use_sequence_in_history_accounts.sql", size: 447, mode: os.FileMode(420), modTime: time.Unix(1522905898, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations4_add_protocol_versionSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\xcd\xb1\x0a\xc2\x30\x10\x06\xe0\x3d\x4f\xf1\xef\x52\x70\xef\x14\x4d\x9d\xce\x44\x4a\x32\x38\x15\xd1\xa3\x06\x6a\xae\x5c\x82\xe2\xdb\xbb\xba\x88\x4f\xf0\x75\x1d\x36\x8f\x3c\xeb\xa5\x31\xd2\x6a\x2c\xc5\x61\x44\xb4\x3b\x1a\x10\x3c\x9d\x71\xcf\xb5\x89\xbe\xa7\x85\x6f\x33\x6b\x85\x01\xac\x73\xd8\x07\x4a\x47\x8f\x55\xa5\xc9\x55\x96\xe9\xc9\x5a\xb3\x14\xe4\xd2\x78\x66\x85\x1b\x0e\x36\x51\xc4\x16\x3e\x44\xf8\x44\xd4\x1b\xf3\x6d\x39\x79\x95\xff\x9a\x1b\xc3\xe9\x97\xd5\x9b\x4f\x00\x00\x00\xff\xff\x83\xbb\x30\x2e\xbc\x00\x00\x00")

func migrations4_add_protocol_versionSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations4_add_protocol_versionSql,
		"migrations/4_add_protocol_version.sql",
	)
}

func migrations4_add_protocol_versionSql() (*asset, error) {
	bytes, err := migrations4_add_protocol_versionSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/4_add_protocol_version.sql", size: 188, mode: os.FileMode(420), modTime: time.Unix(1522905898, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations5_create_trades_tableSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x94\x51\x6f\xaa\x40\x10\x85\xdf\xf9\x15\x13\x9f\x30\x17\x93\x7b\x6f\x5a\x5f\x4c\x9a\x58\x25\xad\xa9\xc1\xd6\x4a\xd2\x37\xb2\xb0\x23\x6c\xa2\x2c\x99\x1d\xda\xf0\xef\x1b\x68\x69\x10\x57\xad\xaf\x9c\x39\x67\x38\xbb\x5f\x76\x34\x82\x3f\x7b\x95\x92\x60\x84\xb0\x70\x66\x6b\x7f\xba\xf1\x61\x33\xbd\x5f\xfa\x90\x29\xc3\x9a\xaa\x88\x49\x48\x34\xe0\x3a\x00\xf0\xf3\x51\x17\x48\x82\x95\xce\x23\x25\x21\x56\xa9\xca\x19\x82\xd5\x06\x82\x70\xb9\xf4\x9a\xc9\x81\x26\x89\x34\x00\x95\x33\xa6\x48\x1d\xb5\x91\xf5\x76\x8b\x64\x35\x37\xb2\xc1\xdd\xee\x84\x5e\xcb\x71\x59\x9d\x75\xeb\x9d\x8c\x84\x31\xc8\x11\x57\x05\x42\x92\x09\x12\x09\x23\xc1\xbb\xa0\x4a\xe5\xa9\x3b\xbe\x19\xf6\x22\x3b\x1e\x65\x4c\x89\x64\x71\xdd\x8e\xcf\xb8\x12\x2d\x6d\x9b\xfe\xfd\xb7\x7b\xf6\xba\xcc\xb9\xff\xff\x30\x7b\xf4\x67\x4f\xe0\x76\x47\xee\xe0\xef\xf0\xbb\x57\xac\xcb\x34\xe3\x6b\x9b\x1d\xb8\xae\xe8\x76\xe0\xfb\x75\xbb\xd6\x75\xb6\xdf\xe1\x50\xdd\xd0\x19\x4e\x9c\x96\xbf\x30\x58\xbc\x84\x3e\x2c\x82\xb9\xff\x06\x19\x93\x8c\x0a\x25\x61\x15\xf4\x91\x0c\x5f\x17\xc1\x03\xc4\x4c\x88\xe0\xda\xc8\xf4\x5a\x0a\x3b\xe1\x9d\xd4\xb8\x8a\x1a\x0c\x2f\x45\xb7\xac\xda\x52\xea\x90\xfa\xb6\x2e\x65\xf4\x90\xf4\xfa\xe4\x78\xc7\x00\x9e\x5a\xf7\x75\x78\x97\x16\x1e\xb1\xe2\x1d\x5f\xa8\x67\x63\xa3\x5e\xdb\x7d\x17\xe6\xfa\x23\x77\xe6\xeb\xd5\xb3\xfd\x5d\x48\x84\x49\x84\xc4\x89\xf3\x19\x00\x00\xff\xff\x79\x87\x24\x6b\x4c\x04\x00\x00")

func migrations5_create_trades_tableSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations5_create_trades_tableSql,
		"migrations/5_create_trades_table.sql",
	)
}

func migrations5_create_trades_tableSql() (*asset, error) {
	bytes, err := migrations5_create_trades_tableSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/5_create_trades_table.sql", size: 1100, mode: os.FileMode(420), modTime: time.Unix(1522905898, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations6_create_assets_tableSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\x3d\x4f\xc3\x30\x18\x84\x77\xff\x8a\x1b\x1d\x91\x0e\x20\xe8\x92\xc9\x34\x16\x58\x18\xa7\xb8\x31\xa2\x53\xe5\x26\x16\x78\x80\x54\xb6\x11\xca\xbf\x47\xaa\x28\xf9\x50\xe6\x7b\xf4\xbc\xef\xdd\x6a\x85\xab\x4f\xff\x1e\x6c\x72\x30\x27\xb2\xd1\x9c\xd5\x1c\x35\xbb\x97\x1c\x1f\x3e\xa6\x2e\xf4\x07\x1b\xa3\x4b\x11\x94\x00\x80\x6f\xb1\xe3\x5a\x30\x89\xad\x16\xcf\x4c\xef\xf1\xc4\xf7\xc8\xcf\xd9\x19\x3c\xa4\xfe\xe4\xf0\xca\xf4\xe6\x91\x69\xba\xbe\xcd\xa0\xaa\x1a\xca\x48\x39\x86\x9a\xae\x1d\xa0\xeb\x9b\x65\xc8\xc7\xf8\xed\xc2\x3f\x76\xb7\x9e\x63\x46\x89\x17\xc3\xe9\xa0\xcc\x47\x3f\xe4\x13\x4b\x46\xb2\x82\x5c\xfa\x09\x55\xf2\xb7\xbf\xf8\xd8\x5f\xee\x54\x6a\x5e\xd9\xec\x84\x7a\xc0\x31\x05\xe7\x40\x27\xb6\x82\x90\xf1\x74\x65\xf7\xf3\x45\x4a\x5d\x6d\x97\xa7\x6b\x6c\x6c\x6c\xeb\x8a\xdf\x00\x00\x00\xff\xff\xfb\x53\x3e\x81\x6e\x01\x00\x00")

func migrations6_create_assets_tableSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations6_create_assets_tableSql,
		"migrations/6_create_assets_table.sql",
	)
}

func migrations6_create_assets_tableSql() (*asset, error) {
	bytes, err := migrations6_create_assets_tableSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/6_create_assets_table.sql", size: 366, mode: os.FileMode(420), modTime: time.Unix(1522905898, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations7_modify_trades_tableSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x54\x4d\x8f\xda\x30\x14\xbc\xe7\x57\x3c\xed\x29\x51\xc3\xaa\xad\xda\xbd\x6c\x55\x09\x58\x97\x46\x65\xc3\x36\x04\xa9\xb7\xc8\x89\xdf\x06\xab\xc1\x8e\x6c\xa7\x88\x7f\x5f\x05\x08\xcd\x27\xb0\xbb\x87\x5e\x93\x99\x79\x6f\xec\xf1\x8c\x46\xf0\x6e\xc3\x53\x45\x0d\xc2\x2a\xb7\x46\x23\x60\x4a\xe6\x60\xd6\x08\x32\x63\x60\x14\x65\xa8\xc1\xd0\x38\xc3\x5b\xc8\x0b\x03\x14\x04\x6e\x41\x0a\x04\x2e\x20\xcf\x68\x82\xd6\x43\xb0\x78\x82\x70\x3c\x99\x13\x58\x73\x6d\xa4\xda\x45\x07\xde\xbd\x35\x0d\xc8\x38\x24\xbd\x3f\xc1\xb6\x00\xe0\xf4\x51\xe6\xa8\xa8\xe1\x52\x44\x9c\xc1\xc4\x9b\x79\x7e\x08\xfe\x22\x04\x7f\x35\x9f\xbb\x7b\xe4\x8d\x54\x0c\xd5\x0d\x78\x7e\x48\x66\x24\x68\xfd\xcd\x90\xa5\xa8\xa2\x24\x93\x1a\x59\x44\x0d\x84\xde\x23\x59\x86\xe3\xc7\xa7\x16\x50\x3e\x3f\xa3\x1a\x1c\x12\x53\x8d\x11\x4d\x12\x59\x08\xd3\x03\x82\x80\x7c\x23\x01\xf1\xa7\x64\x79\xda\xfc\x88\xd6\x36\x67\x4e\x5d\x44\x6b\xbc\x5a\xa2\xc4\x76\x04\x36\xa5\x6c\x87\x3e\xfd\x4e\xa6\x3f\xc0\xae\x43\xbe\xc2\xfb\x23\x71\xbf\x09\xaa\x37\x3b\x38\xe9\xbc\xc1\xc4\x49\xe3\xac\x8f\x16\xea\x9f\x95\xbd\x41\xae\x23\x8d\x59\x86\x0a\x26\x8b\xc5\x9c\x8c\xfd\xc3\xbf\x3d\xd7\x6e\x1e\xf3\x97\xce\xd2\x8e\xe5\xdc\x5b\x55\x04\x57\xbe\xf7\x73\x45\xc0\xf3\x1f\xc8\x2f\x58\x1b\xc5\xa2\x9c\x33\x58\xf8\xed\x54\xae\x96\x9e\x3f\x83\xd8\x28\x44\xb0\xfb\xc2\xe9\x56\x41\x74\x4e\xf1\xae\x8b\x52\xae\x22\xc3\x37\x18\x65\x52\xfe\x2e\xf2\xc1\x09\x93\x30\x20\xa4\x69\xc1\xed\x38\x70\x3b\xb1\xee\x1d\x5a\xd1\xae\x1a\xd9\x39\xa5\x3e\xc5\xeb\x1d\x5c\xb5\x60\xbc\x8b\xf6\xcf\xee\xd2\x79\x57\x6f\xb3\xbc\x37\xab\x5e\x4d\x0f\x72\x2b\x1a\xe5\x24\x70\x8b\xaa\xea\x25\x85\x5c\x68\x53\xe2\xaa\xde\x92\x02\x6f\x87\x7b\x09\x12\xaa\x13\xca\xf0\xd5\xfd\x14\xf3\x94\x0b\x33\xd0\x4f\x5c\x18\x4c\x51\x0d\xd5\x4e\x2f\xf7\x10\xf2\xc1\xdf\x71\xb1\x3b\x47\x96\x19\x3b\x5e\xa7\xd9\xe5\x08\xc9\x9a\x2a\x9a\x18\x54\xf0\x87\xaa\x1d\x17\xa9\x7d\xf7\xc9\x19\xe6\x70\xad\x0b\x54\x3d\xac\xcf\x77\x67\x58\x89\x64\x7d\x93\x3e\x7c\xec\xe7\x1c\x5e\x77\x6b\xfd\xaa\x03\xea\x90\x5a\x01\xc8\x22\x5d\x9b\x97\x1a\x6b\xb0\x5e\x60\xad\xc1\xbb\xda\x5c\xc5\x3a\x6b\xaf\x09\x2a\x0d\xfe\x87\x62\x7a\xc5\x13\x6c\x8b\x94\x1a\xe5\x55\x5d\x92\x68\xe5\xd1\x6d\xc7\xc6\xed\xa6\x6f\x60\xda\xe1\xe4\x2e\xcd\xeb\x04\xc5\xed\xde\xa6\xdb\x17\x0c\xe7\xfe\x6f\x00\x00\x00\xff\xff\x2a\xff\xe8\x4a\xff\x08\x00\x00")

func migrations7_modify_trades_tableSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations7_modify_trades_tableSql,
		"migrations/7_modify_trades_table.sql",
	)
}

func migrations7_modify_trades_tableSql() (*asset, error) {
	bytes, err := migrations7_modify_trades_tableSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/7_modify_trades_table.sql", size: 2303, mode: os.FileMode(420), modTime: time.Unix(1522905898, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations8_add_aggregatorsSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x92\x31\x6f\xdb\x30\x14\x84\x77\xfe\x8a\x1b\x34\xd8\xa8\x65\xa3\x1d\x1b\x78\xa0\x65\x5a\x10\x40\x2b\xae\x48\x0d\x99\x02\x26\x61\x64\xa1\x32\xa5\x92\xcf\x30\xfc\xef\x0b\xaa\x4d\x6c\xb4\x05\x1a\x14\xcd\x46\x1c\xf8\x0e\x77\xdf\x7b\x69\x8a\x0f\x87\xb6\xf1\x86\x2c\xea\x81\xb1\x34\xc5\x9e\x68\x08\x9f\x17\x8b\x53\xfb\xb5\x9d\x0f\x7d\xa0\xc6\xdb\xf0\xad\x9b\xf7\xbe\x19\xb5\xc5\xa6\xf5\x81\x16\x9d\x09\x74\x3f\x31\x4d\xe3\x6d\x63\xc8\x4e\xe3\x68\xe6\x6d\x34\x32\x78\x3e\xba\x47\x6a\x7b\x07\xda\x1b\x82\xe9\x4e\xe6\x1c\xe0\x2d\x1d\xbd\x0b\xa0\xbd\xc5\x73\xf4\x80\xeb\x5d\x5a\xd6\x52\xa2\x25\x7b\x60\x59\x25\xb8\x16\xd8\xd4\x65\xa6\x8b\xdb\x12\xc3\xf1\xa1\x6b\x1f\xe7\xe3\xd7\x7b\xd3\x34\x98\xc0\xb8\xb3\xed\xec\xc1\x3a\x9a\x5d\xbd\x31\x65\x40\x25\x74\x5d\x95\xea\x5a\x96\xbc\xcc\x6b\x9e\x0b\xa8\x2f\x12\xc5\x76\x5b\x6b\xbe\x92\x02\x4a\x57\x45\xa6\xc1\x15\x92\x04\x4a\x48\x91\x69\x24\x1f\x91\x24\x37\x63\x7f\xee\x9e\x62\x44\x87\x93\x37\x03\x8c\xc3\x6b\x47\x18\xdf\x1f\xdd\x13\x5a\x7a\xc9\xca\xf3\xbc\x12\x79\x7c\xfd\x0c\xbb\x29\x2a\xa5\x31\x61\x2a\xb6\xc0\x12\xbb\x7a\x25\x8b\xec\xd2\x61\xc6\x56\x5c\x09\x7d\xb7\x13\x58\x82\x97\x77\x42\x8a\xad\x28\xf5\x8c\xa9\xdf\x34\x36\xfd\x91\xe7\xed\x50\xe3\x4a\xde\xc6\x74\x5c\xde\x7b\x23\xfd\xf4\x7f\x90\x4a\x3e\x12\x0d\xb1\x3e\x00\x2c\x7f\x2d\x31\x63\x0f\x26\x58\x3a\x0f\x16\xcb\xeb\x3a\x2c\x8c\xda\x38\x72\x91\x5f\xb0\xbe\x9e\xfd\xba\x3f\x39\xb6\xae\x6e\x77\xff\x74\x79\xc8\xb8\xca\xf8\x5a\xdc\xfc\xd9\xe2\x02\xfa\xaf\x06\xdf\x03\x00\x00\xff\xff\x7e\x17\x8e\x03\x8b\x03\x00\x00")

func migrations8_add_aggregatorsSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations8_add_aggregatorsSql,
		"migrations/8_add_aggregators.sql",
	)
}

func migrations8_add_aggregatorsSql() (*asset, error) {
	bytes, err := migrations8_add_aggregatorsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/8_add_aggregators.sql", size: 907, mode: os.FileMode(420), modTime: time.Unix(1522905898, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations8_create_asset_stats_tableSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\xc1\x6e\xf2\x30\x10\x84\xef\x79\x8a\x3d\x82\xfe\x9f\x5b\xd5\x0b\x27\x63\x6f\xa9\x55\xe3\x44\x1b\xa7\x2a\xa7\xc8\x24\x2e\x8d\x44\x92\x2a\x36\xaa\x78\xfb\xca\x84\x56\xa1\x8a\x4f\xb6\xf5\x69\x66\x67\x67\xb5\x82\x7f\x6d\x73\x1c\x6c\x70\x50\x7c\x26\x9c\x90\x19\x04\xc3\x36\x0a\xc1\x7a\xef\x42\xe9\x83\x0d\x1e\x16\x09\x00\x40\x53\xc3\xdd\xd9\xc8\xad\xd4\x66\xbc\x67\x24\x77\x8c\xf6\xf0\x82\x7b\x20\x7c\x42\x42\xcd\x31\x87\x8f\xc6\x87\x7e\xb8\x94\x57\x31\x0f\xa9\x06\x81\x0a\x0d\x02\x67\x39\x67\x02\xe3\x4f\x91\x89\xe8\x4a\x98\x1b\x92\xdc\xfc\xbf\x7a\xd9\xb6\x3f\x77\x61\xde\x4b\xa7\x06\x74\xa1\xd4\x48\x76\xe7\xb6\xb4\x55\x15\x71\x1f\xdf\x52\x1b\xdc\x22\xcd\x90\xef\x27\x7b\xf4\x93\xf9\xf3\x1d\x53\xea\xa6\x7a\x4f\x86\xbe\x3d\x4d\x93\xbe\x32\xe2\xcf\x8c\x16\x8f\x0f\xcb\x5f\x32\x59\xae\x93\x9f\x8d\x49\x2d\xf0\xed\xb6\xb1\xc3\xa5\xac\xfa\xda\xc5\x64\x7f\xd2\x17\xb9\xd4\x5b\x38\x84\xc1\x39\x58\x8c\x70\x24\xa3\xce\xb4\x08\xd1\x7f\x75\x89\xa0\x34\x9b\x29\xa2\xb2\xbe\xb2\xb5\x5b\x7f\x07\x00\x00\xff\xff\xa9\x7e\x10\x6f\xb9\x01\x00\x00")

func migrations8_create_asset_stats_tableSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations8_create_asset_stats_tableSql,
		"migrations/8_create_asset_stats_table.sql",
	)
}

func migrations8_create_asset_stats_tableSql() (*asset, error) {
	bytes, err := migrations8_create_asset_stats_tableSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/8_create_asset_stats_table.sql", size: 441, mode: os.FileMode(420), modTime: time.Unix(1522905898, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrations9_add_header_xdrSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\x55\xd0\xce\xcd\x4c\x2f\x4a\x2c\x49\x55\x08\x2d\xe0\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\xf0\xf7\xf3\x89\x54\xc8\xc8\x2c\x2e\xc9\x2f\xaa\x8c\xcf\x49\x4d\x49\x4f\x2d\x2a\x56\x70\x74\x71\x51\x70\xf6\xf7\x09\xf5\xf5\x53\x80\x08\xc5\x67\xa4\x26\xa6\xa4\x16\x29\x94\xa4\x56\x94\x28\xf8\x85\xfa\xf8\x58\x73\x71\x21\x1b\xea\x92\x5f\x9e\x47\xd8\x58\x97\x20\xff\x00\xac\xe6\x5a\x03\x02\x00\x00\xff\xff\xe1\xe4\xef\x11\xa1\x00\x00\x00")

func migrations9_add_header_xdrSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations9_add_header_xdrSql,
		"migrations/9_add_header_xdr.sql",
	)
}

func migrations9_add_header_xdrSql() (*asset, error) {
	bytes, err := migrations9_add_header_xdrSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/9_add_header_xdr.sql", size: 161, mode: os.FileMode(420), modTime: time.Unix(1522905898, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"latest.sql": latestSql,
	"migrations/10_add_trades_price.sql": migrations10_add_trades_priceSql,
	"migrations/1_initial_schema.sql": migrations1_initial_schemaSql,
	"migrations/2_index_participants_by_toid.sql": migrations2_index_participants_by_toidSql,
	"migrations/3_use_sequence_in_history_accounts.sql": migrations3_use_sequence_in_history_accountsSql,
	"migrations/4_add_protocol_version.sql": migrations4_add_protocol_versionSql,
	"migrations/5_create_trades_table.sql": migrations5_create_trades_tableSql,
	"migrations/6_create_assets_table.sql": migrations6_create_assets_tableSql,
	"migrations/7_modify_trades_table.sql": migrations7_modify_trades_tableSql,
	"migrations/8_add_aggregators.sql": migrations8_add_aggregatorsSql,
	"migrations/8_create_asset_stats_table.sql": migrations8_create_asset_stats_tableSql,
	"migrations/9_add_header_xdr.sql": migrations9_add_header_xdrSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"latest.sql": &bintree{latestSql, map[string]*bintree{}},
	"migrations": &bintree{nil, map[string]*bintree{
		"10_add_trades_price.sql": &bintree{migrations10_add_trades_priceSql, map[string]*bintree{}},
		"1_initial_schema.sql": &bintree{migrations1_initial_schemaSql, map[string]*bintree{}},
		"2_index_participants_by_toid.sql": &bintree{migrations2_index_participants_by_toidSql, map[string]*bintree{}},
		"3_use_sequence_in_history_accounts.sql": &bintree{migrations3_use_sequence_in_history_accountsSql, map[string]*bintree{}},
		"4_add_protocol_version.sql": &bintree{migrations4_add_protocol_versionSql, map[string]*bintree{}},
		"5_create_trades_table.sql": &bintree{migrations5_create_trades_tableSql, map[string]*bintree{}},
		"6_create_assets_table.sql": &bintree{migrations6_create_assets_tableSql, map[string]*bintree{}},
		"7_modify_trades_table.sql": &bintree{migrations7_modify_trades_tableSql, map[string]*bintree{}},
		"8_add_aggregators.sql": &bintree{migrations8_add_aggregatorsSql, map[string]*bintree{}},
		"8_create_asset_stats_table.sql": &bintree{migrations8_create_asset_stats_tableSql, map[string]*bintree{}},
		"9_add_header_xdr.sql": &bintree{migrations9_add_header_xdrSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

